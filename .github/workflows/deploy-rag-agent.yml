name: RAG Agent CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'rag-agent/**'
      - 'templates/**'
      - 'static/**'
      - 'DATA/**'
      - '.github/workflows/rag-agent-ci-cd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'rag-agent/**'
      - 'templates/**'
      - 'static/**'
      - 'DATA/**'
  workflow_dispatch:

env:
  AZURE_CONTAINER_REGISTRY: pgpglassregistry.azurecr.io
  RESOURCE_GROUP: pgp-glass-rg
  APP_NAME: pgp-gpt
  IMAGE_NAME: pgp-gpt

jobs:
  # Job 1: Test and Lint RAG Agent
  test-and-lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-rag-agent-${{ hashFiles('rag-agent/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-rag-agent-
    
    - name: Install dependencies
      run: |
        cd rag-agent
        python -m pip install --upgrade pip
        pip install -r requirements.txt

  # Job 3: Build and Push Docker Image
  build-and-push:
    runs-on: ubuntu-latest
    needs: [test-and-lint]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    outputs:
      image-tag: ${{ steps.image-tag.outputs.tag }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Generate image tag
      id: image-tag
      run: |
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT
        else
          echo "tag=dev-${{ github.sha }}" >> $GITHUB_OUTPUT
        fi
    
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Build and push RAG Agent image
      run: |
        az acr build \
          --registry pgpglassregistry \
          --image ${{ env.IMAGE_NAME }}:${{ steps.image-tag.outputs.tag }} \
          --image ${{ env.IMAGE_NAME }}:latest \
          --file rag-agent/Dockerfile \
          --context .

  # Job 4: Deploy to Azure Container Apps
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy RAG Agent
      run: |
        az containerapp update \
          --name ${{ env.APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.image-tag }} \
          --set-env-vars \
            OPENAI_API_KEY=secretref:openai-api-key \
            ENVIRONMENT=production \
            SERVICE_VERSION=${{ needs.build-and-push.outputs.image-tag }}
    
    - name: Health Check
      run: |
        echo "Waiting for RAG Agent to be ready..."
        sleep 45
        
        RAG_URL=$(az containerapp show \
          --name ${{ env.APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query "properties.configuration.ingress.fqdn" -o tsv)
        
        # Health check with retry
        for i in {1..5}; do
          if curl -f https://$RAG_URL/health; then
            echo "‚úÖ RAG Agent is healthy!"
            echo "üöÄ RAG Agent URL: https://$RAG_URL"
            break
          else
            echo "Attempt $i failed, retrying in 10 seconds..."
            sleep 10
          fi
        done

  # Job 5: Notification
  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.deploy.result == 'success'
      run: |
        echo "üéâ RAG Agent deployment successful!"
        echo "Service: RAG Agent"
        echo "Version: ${{ needs.build-and-push.outputs.image-tag }}"
    
    - name: Notify Failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "‚ùå RAG Agent deployment failed!"
        exit 1